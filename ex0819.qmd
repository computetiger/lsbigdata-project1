---
title: "Ames, Iowa"
author: "Group 7"
format: 
  dashboard:
    scrolling: True
    nav-buttons:
      - icon: github
        href: https://github.com/AhyeongJ/lsbigdata_project1
    css: styles.css  
---

# Ames, IA 

## {height:40%}

```{python}
# 파일 불러오기]
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns 
import folium
import plotly.express as px
import plotly.graph_objects as go




df=pd.read_csv("data/data_2022.csv")
df.columns=["label","total","male","female"]
df=df.iloc[2:20,[0,2,3]]
df[["male","female"]]=df[["male","female"]].replace(",","", regex=True).astype(int)
df["male"]=-df["male"]

age_groups_n = [
    "Under 5","5 ~","10 ~","15 ~","20 ~","25 ~","30 ~","35 ~","40 ~","45 ~",
    "50 ~","55 ~","60 ~","65 ~","70 ~","75 ~","80 ~","85 Over"]
df["label"]=age_groups_n

df_melted = df.melt(id_vars='label', var_name='Gender', value_name='Population')

# pyramid plot
fig = px.bar(df_melted, 
             x='Population', 
             y='label', 
             color='Gender',
             orientation='h', 
             labels={'Population': 'Population Count', 'label': 'Age Group'},
             color_discrete_map={'male': '#058092', 'female': '#9BD8A4'},
             )

# layout 

x_custom_tickvals = [-10000, -5000, 0, 5000, 10000] # 10k = 10000 으로? 
x_custom_ticktext = [10000, 5000, 0, 5000, 10000]



fig = fig.update_layout(
      title='Male vs Female (age)',
      xaxis_title='Population',
      xaxis=dict(
            tickvals=x_custom_tickvals,
            ticktext=x_custom_ticktext,
            showgrid=True,               
            gridcolor='LightGray',       
            gridwidth=0.6
            ),
      
      yaxis_title='Age',
      barmode='overlay',
      plot_bgcolor='white',  # 그래프 배경색을 흰색으로 설정
      paper_bgcolor='white'  
)

fig.show()
```

## {heihgt:25%}
## {width: 50%}
```{python}
#방갯수
all_branch=ames.copy()
all_branch["Branch_Number"]="Branch_all"
all_branch=all_branch[["TotRms_AbvGrd","Branch_Number"]].groupby("TotRms_AbvGrd").count()
all_branch_mean=all_branch["Branch_Number"]/all_branch["Branch_Number"].sum()
all_branch_mean=all_branch_mean.to_frame()

# 브랜치 1 
branch=ames.query('Branch_Number=="Branch_2"')[["TotRms_AbvGrd","Branch_Number"]]
branch=branch.groupby("TotRms_AbvGrd").count()
branch_mean=branch["Branch_Number"]/branch["Branch_Number"].sum()
branch_mean=branch_mean.to_frame()
branch_mean["Branch_Number"]=-branch_mean["Branch_Number"]

df_room_mean=pd.concat([branch_mean,all_branch_mean]).reset_index(drop=False)
df_room_mean["branch_num"]=["Branch_2"] * len(branch_mean) + ["Branch_all"]* len(all_branch_mean)
# 14번 행 추가 (빈 값)
new=pd.DataFrame({"TotRms_AbvGrd":[14], "Branch_Number":[0],"branch_num":["Branch_all"]})
df_room_mean=pd.concat([df_room_mean,new])

# pyramid plot branch 1 과 전체의 방 갯수 : mean
fig = px.bar(df_room_mean, 
             x='Branch_Number', 
             y='TotRms_AbvGrd', 
             color='branch_num',
             orientation='h', 
             labels={'Branch_Number': 'Branch_Count', 'TotRms_AbvGrd': 'total_room_num'},
             color_discrete_map={'Branch_4': '#9BD8A4', 'Branch_all': '#058092'})

fig = fig.update_traces(textfont=dict(size=7))

# x축 값을 원하는 숫자로 수정
custom_tickvals = [-0.3, -0.2, -0.1, 0, 0.1, 0.2, 0.3] 
custom_ticktext = [0.3, 0.2, 0.1, 0, 0.1, 0.2, 0.3]  

fig = fig.update_layout(
      title='branch1 vs all ames - room : mean',
      xaxis_title='branch1 vs all ames',
      yaxis_title='room_count',
      xaxis=dict(
          tickvals=custom_tickvals,  # 커스텀 tickvals 설정
          ticktext=custom_ticktext,
          range=[-0.33, 0.33],
          showgrid=True,
          gridcolor='lightgray'
      ),
      yaxis=dict(
          showticklabels=False  # y축의 범례 숨기기
      ),
      barmode='overlay',
      plot_bgcolor='white',  # 플롯 배경색 흰색
      paper_bgcolor='white' # 전체 배경색 흰색
)
fig = fig.add_scatter(x=[0]*len(df_room_mean), 
                      y=df_room_mean['TotRms_AbvGrd'], 
                      mode='text', 
                      text=df_room_mean['TotRms_AbvGrd'], 
                      textposition="middle center"
                      )
fig.show()
```




```{python}
year=ames[["Year_Built","Year_Remod_Add","Branch_Number"]]

#year=year.query('Branch_Number=="Branch_4"')[["Year_Built","Year_Remod_Add","Branch_Number"]]
sum(year["Year_Built"]-year["Year_Remod_Add"] > 0)

```

```{python}

```



### Row {.tabset}
```{python}
#| title: branch_1
year_df=ames[["Year_Built","Year_Remod_Add","Branch_Number"]]

def year(x):
    for i in range(20):
        if 1870+(10*i) <= x <1880+(10*i):
            x= 1870+(10*i)
        else:
            continue
    return x

year_df["Year_Built"]=year_df["Year_Built"].apply(year)
year_df["Year_Remod_Add"]=year_df["Year_Remod_Add"].apply(year)

year_df=year_df.query('Branch_Number=="Branch_4"')\
    .groupby(["Year_Built","Year_Remod_Add"]).count().reset_index(drop=False)

# scatter plot
fig = px.scatter(year_df, x= 'Year_Built', y= 'Year_Remod_Add',size= "Branch_Number",color="Branch_Number",\
                 color_continuous_scale=px.colors.sequential.Bluyl, size_max = 30)

x_custom_tickvals = [1870, 1880, 1890, 1900, 1910, 1920, 1930, 1940, 1950, 1960, 1970, 1980, 1990, 2000, 2010]
x_custom_ticktext = [1870, 1880, 1890, 1900, 1910, 1920, 1930, 1940, 1950, 1960, 1970, 1980, 1990, 2000, 2010]

y_custom_tickvals = [1950, 1960, 1970, 1980, 1990, 2000, 2010]
y_custom_ticktext = [1950, 1960, 1970, 1980, 1990, 2000, 2010]


fig = fig.update_layout(
      title='year built vs remodel',
      xaxis_title='year_built',
      yaxis_title='year_remodel',
      xaxis=dict(
          tickvals=x_custom_tickvals,
          ticktext=x_custom_ticktext,
          range=[1870, 2015],
          tickangle=45),
      yaxis=dict(
          tickvals=y_custom_tickvals,
          ticktext=y_custom_ticktext,
          range=[1945, 2015]),
      plot_bgcolor='white',  # 플롯 배경색 흰색
      paper_bgcolor='white',
      coloraxis_colorbar_title='New color'  # 전체 배경색 흰색
          )

for x in range(187, 203):
    fig = fig.add_shape(
          type="line",
          x0=x*10, y0=1860, x1=x*10, y1=2020,
          line=dict(color="LightGrey", width=1, dash="dot"),
          layer="below"
          
    )

for y in range(190, 202):
    fig = fig.add_shape(
          type="line",
          x0=1860, y0=y*10, x1=2020, y1=y*10,
          line=dict(color="LightGrey", width=1, dash="dot"),
          layer="below"
    )

fig.update_traces(
    marker=dict(
        opacity=1
    ),
    selector=dict(mode='markers'))

fig.show()
```

```{python}
import plotly.express as px
import pandas as pd

year_df = ames[["Year_Built", "Year_Remod_Add", "Branch_Number"]]

def year(x):
    for i in range(20):
        if 1870 + (10 * i) <= x < 1880 + (10 * i):
            x = 1870 + (10 * i)
        else:
            continue
    return x

year_df["Year_Built"] = year_df["Year_Built"].apply(year)
year_df["Year_Remod_Add"] = year_df["Year_Remod_Add"].apply(year)

year_df = year_df.query('Branch_Number == "Branch_1"')\
    .groupby(["Year_Built", "Year_Remod_Add"]).count().reset_index(drop=False)

# 산점도 생성
fig = px.scatter(year_df, x='Year_Built', y='Year_Remod_Add', size="Branch_Number", color="Branch_Number",
                 color_continuous_scale=px.colors.sequential.Aggrnyl, size_max=45)

fig = fig.update_traces(textfont=dict(size=12, family="Arial Black"), textposition='middle center')

x_custom_tickvals = [1870, 1880, 1890, 1900, 1910, 1920, 1930, 1940, 1950, 1960, 1970, 1980, 1990, 2000, 2010]
x_custom_ticktext = [1870, 1880, 1890, 1900, 1910, 1920, 1930, 1940, 1950, 1960, 1970, 1980, 1990, 2000, 2010]

y_custom_tickvals = [1950, 1960, 1970, 1980, 1990, 2000, 2010]
y_custom_ticktext = [1950, 1960, 1970, 1980, 1990, 2000, 2010]

fig = fig.update_layout(
    title='Year Built vs Remodel',
    xaxis_title='Year Built',
    yaxis_title='Year Remodel',
    xaxis=dict(
        tickvals=x_custom_tickvals,
        ticktext=x_custom_ticktext,
        range=[1870, 2015],
        tickangle=45),
    yaxis=dict(
        tickvals=y_custom_tickvals,
        ticktext=y_custom_ticktext,
        range=[1945, 2015]),
    plot_bgcolor='white',  # 플롯 배경색 흰색
    paper_bgcolor='white'  # 전체 배경색 흰색
)

# 격자선 추가
for x in range(187, 203):
    fig.add_shape(
        type="line",
        x0=x * 10, y0=1860, x1=x * 10, y1=2020,
        line=dict(color="LightGrey", width=1, dash="dot"),
        layer='below'  # 격자선을 산점도보다 뒤에 배치
    )

for y in range(190, 202):
    fig.add_shape(
        type="line",
        x0=1860, y0=y * 10, x1=2020, y1=y * 10,
        line=dict(color="LightGrey", width=1, dash="dot"),
        layer='below'  # 격자선을 산점도보다 뒤에 배치
    )

fig.show()

```


```{python}
#| title: Ames
year_df=ames[["Year_Built","Year_Remod_Add","Branch_Number"]]

def year(x):
    for i in range(20):
        if 1870+(10*i) <= x <1880+(10*i):
            x= 1870+(10*i)
        else:
            continue
    return x

year_df=year_df.groupby(["Year_Built","Year_Remod_Add"]).count().reset_index(drop=False)

# scatter plot

fig = px.scatter(year_df, x= 'Year_Built', y= 'Year_Remod_Add',size= "Branch_Number", text="Branch_Number",color="Branch_Number",\
                 color_continuous_scale=px.colors.sequential.Aggrnyl, size_max = 45)


fig = fig.update_traces(textfont=dict(size=10),textposition='top center')

for x in range(187, 203):
    fig = fig.add_shape(
          type="line",
          x0=x*10, y0=1860, x1=x*10, y1=2020,
          line=dict(color="LightGrey", width=1, dash="dot")
    )

for y in range(190, 203):
    fig = fig.add_shape(
          type="line",
          x0=1860, y0=y*10, x1=2020, y1=y*10,
          line=dict(color="LightGrey", width=1, dash="dot")
    )

x_custom_tickvals = [1870, 1880, 1890, 1900, 1910, 1920, 1930, 1940, 1950, 1960, 1970, 1980, 1990, 2000, 2010]
x_custom_ticktext = [1870, 1880, 1890, 1900, 1910, 1920, 1930, 1940, 1950, 1960, 1970, 1980, 1990, 2000, 2010]

y_custom_tickvals = [1950, 1960, 1970, 1980, 1990, 2000, 2010]
y_custom_ticktext = [1950, 1960, 1970, 1980, 1990, 2000, 2010]


fig = fig.update_layout(
      title='year built vs remodel',
      xaxis_title='year_built',
      yaxis_title='year_remodel',
      xaxis=dict(
          tickvals=x_custom_tickvals,
          ticktext=x_custom_ticktext,
          range=[1870, 2015]),
      yaxis=dict(
          tickvals=y_custom_tickvals,
          ticktext=y_custom_ticktext,
          range=[1945, 2015]),
      plot_bgcolor='white',  # 플롯 배경색 흰색
      paper_bgcolor='white' # 전체 배경색 흰색
          )

fig.show()  
```




## {height: 30%}
```{python}
tot_1st = ames.query('Second_Flr_SF == False') \
               .agg(count =('Second_Flr_SF','count'))
tot_1st = tot_1st['Second_Flr_SF'][0]

tot_2nd = ames.query('Second_Flr_SF == True') \
               .agg(count =('Second_Flr_SF','count'))
tot_2nd = tot_2nd['Second_Flr_SF'][0]


b1_1st = ames.query('Branch_Number == "Branch_1" & Second_Flr_SF == False') \
               .agg(count =('Branch_Number','count'))
b1_1st = b1_1st['Branch_Number'][0]

b1_2nd = ames.query('Branch_Number == "Branch_1" & Second_Flr_SF == True') \
               .agg(count =('Branch_Number','count'))
b1_2nd = b1_2nd['Branch_Number'][0]

b1_1 = f"{b1_1st} / {tot_1st}"
b1_2 = f"{b1_2nd} / {tot_2nd}"
```


```{python}
#| content: valuebox
#| title: "1st Floor in Branch 1"
dict(
  icon = "1-square-fill",
  color = "#F7FEAE",
  value = b1_1
)
```

```{python}
#| content: valuebox
#| title: "2nd Floor in Branch 1"
dict(
  icon = "2-square-fill",
  color = "#F7FEAE",
  value = b1_2
)
```

## Row

```{python}
# Distance_m의 전체 평균 계산
distance_mean = ames['Distance_m'].mean()

# Branch_1의 평균 Distance_m 계산
branch_1_mean = ames.query('Branch_Number == "Branch_1"')['Distance_m'].mean()

# 막대그래프 그리기
fig = go.Figure()

fig = fig.add_trace(go.Bar(
      x=[distance_mean, branch_1_mean],  # x축에 평균값을 설정
      y=['Distance Mean', 'Branch_1 Mean'],  # y축에 레이블을 설정
      orientation='h',  # 가로 막대그래프 설정
      marker=dict(color=['#058092', '#9BD8A4']),  # 막대 색상 설정
      text=[f"{distance_mean:,.2f}", f"{branch_1_mean:,.2f}"],  # 텍스트로 값 설정
      textposition='inside',  # 텍스트 위치를 막대 안으로 설정
      insidetextanchor='middle'  # 텍스트를 막대 가운데 정렬
))

# 이모지 추가 (각각의 막대 끝에)
fig = fig.add_annotation(
      x=distance_mean,  # Distance Mean 막대의 끝에 이모지를 추가
      y='Distance Mean',
      text='🏃‍♂️',
      showarrow=False,
      xanchor='left',
      yanchor='middle',
      xshift=30,  # 막대 끝에서 약간 오른쪽에 이모지를 표시
      font=dict(size=60)  # 이모지 크기 조절
)

fig = fig.add_annotation(
      x=branch_1_mean,  # Branch_1 Mean 막대의 끝에 이모지를 추가
      y='Branch_1 Mean',
      text='🏃‍♂️',
      showarrow=False,
      xanchor='left',
      yanchor='middle',
      xshift=30,  # 막대 끝에서 약간 오른쪽에 이모지를 표시
      font=dict(size=60)  # 이모지 크기 조절
)

# 그래프 레이아웃 설정
fig = fig.update_layout(
      title='Distance',
      xaxis_title='Distance (m)',
      yaxis_title='',
      yaxis=dict(autorange="reversed"),  # y축 순서 뒤집기 (가로 막대그래프일 때)
      bargap=0.5,  # 막대 사이 간격 설정
      plot_bgcolor='white',  # 그래프 배경색을 흰색으로 설정
      paper_bgcolor='white'  # 전체 배경색을 흰색으로 설정
)

# 그래프 보여주기
fig.show()
```


# Branch 2
##
```{python}

def branch_map(df, branch_number):
  branch_data = df[df['Branch_Number'] == branch_number]
  map_center = [branch_data['Latitude'].mean(), branch_data['Longitude'].mean()]
  m = folium.Map(location=map_center, tiles="CartoDB positron", zoom_start=12)  
  univ_icon =  folium.CustomIcon("images/univ1.png", icon_size=(50, 50))
  popup_text2 = "University of Iowa"
  folium.Marker(
      location=[42.0267, -93.6465],
      popup=folium.Popup(popup_text2, max_width=300),
      icon=univ_icon).add_to(m)
  draw = Draw(
    draw_options={
        'polyline': True,
        'polygon': True,
        'circle': True,
        'marker': True,
        'circlemarker': False
    },
    edit_options={'edit': True, 'remove': True}
    ).add_to(m)

  for row in branch_data.itertuples():
    if row.Distance_m / 60 <= 20 :
      popup_text = f"""
      가격 : {row.Sale_Price}<br>
      침실개수 : {row.Bedroom_AbvGr}<br>
      화장실 갯수 : {row.Bath_AbvGr}<br>
      층수 : {row.Second_Flr_SF}<br>
      도보 : 약 {round(row.Distance_m / 60,1)} 분<br>
      차량 : 약 {round(row.Distance_m / 1000,1)} 분(60km/h)
      """
    else :
      popup_text = f"""
      가격 : {row.Sale_Price}<br>
      침실개수 : {row.Bedroom_AbvGr}<br>
      화장실 갯수 : {row.Bath_AbvGr}<br>
      층수 : {row.Second_Flr_SF}<br>
      차량 : 약 {round(row.Distance_m / 1000,1)} 분(60km/h)

      """
      # 조건 들어갈 자리
    icon_path = determine_icon_path(row.Sale_Price) 
    icon = folium.CustomIcon(icon_path, icon_size=(90, 80))
    folium.Marker(
        location=[row.Latitude, row.Longitude],
        popup=folium.Popup(popup_text, max_width=300),
        icon=icon
    ).add_to(m)

    # 범례 추가
  legend_html = '''
    <div style="
    position: fixed; 
    top: 10px; right: 10px; width: 160px; height: 140px; 
    border:2px solid grey; z-index:9999; font-size:12px;
    background-color:white; padding: 10px;
    ">
    <b>Branch_1</b><br>
    <img src="images/1.png" height="20" width="20"> House 1<br>
    <img src="images/2.png" height="20" width="20"> House 2<br>
    <img src="images/3.png" height="20" width="20"> House 3<br>
    <img src="images/4.png" height="20" width="20"> Building
    </div>
    '''
  m.get_root().html.add_child(folium.Element(legend_html))
  return m


branch_map(df,'Branch_2')
```

## {height:30%}
## {width: 50%}

```{python}
ames = pd.read_csv("data/ames.csv")
branch2 = ames.query("Branch_Number == 'Branch_2'")
price_min, price_max = ames['Sale_Price'].min(), ames['Sale_Price'].max()
bin_count = 40
bin_size = (price_max - price_min) / bin_count

fig = go.Figure()
# 첫 번째 데이터프레임의 히스토그램 추가
fig = fig.add_trace(go.Histogram(
      x=ames['Sale_Price'],
      name='Ames',
      opacity=0.6,  # 투명도 설정
      marker=dict(color='#058092',
          line=dict(color='black', width=0.5)  # 경계선 설정
      ),
      xbins=dict(
          start=price_min,  
          end=price_max,  
          size=bin_size
)))

# 두 번째 데이터프레임의 히스토그램 추가
fig = fig.add_trace(go.Histogram(
      x=branch2['Sale_Price'],
      name='Branch2',
      opacity=0.7,  # 투명도 설정
      marker=dict(color= '#F7FEAE',
          line=dict(color='black', width=0.5)  # 경계선 설정
      ),
      xbins=dict(
          start=price_min,  
          end=price_max,  
          size=bin_size
)))

# 히스토그램을 겹쳐서 표시하기 위해 바 형태를 겹쳐서 그리도록 설정
fig = fig.update_layout(
      barmode='overlay',
      plot_bgcolor='white',  # 배경색 흰색으로 설정
      xaxis=dict(
          showgrid=False,  # X축 그리드 제거
          title='Sale Price'  # X축 제목 설정
      ),
      yaxis=dict(
          showgrid=False,  # Y축 그리드 제거
          title='Frequency'  # Y축 제목 설정
      ),
      title={
        'text': 'House Sale Price',  # 제목 설정
        'x': 0.5,  # 제목을 중앙으로 설정
        'xanchor': 'center',  # 중앙 정렬
        'yanchor': 'top',  # 제목이 위쪽에 위치하도록 설정
        'font': dict(size=24, color='black')  # 제목 폰트 크기 및 색상 설정
    }
)
# 그래프 표시
fig.show()
```


```{python}
ames = pd.read_csv("data/ames.csv")
branch2 = ames.query("Branch_Number == 'Branch_2'")
# 재범주화 함수 정의
def recondition(condition):
    if condition in ['Very_Poor', 'Poor', 'Below_Average']:
        return 'Bad'
    elif condition == 'Average':
        return 'Average'
    elif condition in ['Above_Average', 'Fair', 'Good']:
        return 'Good'
    elif condition in ['Very_Good', 'Excellent']:
        return 'Very Good'

# 데이터프레임의 Overall_Cond 컬럼 재범주화
ames['Overall_Cond'] = ames['Overall_Cond'].apply(recondition)
branch2['Overall_Cond'] = branch2['Overall_Cond'].apply(recondition)

import plotly.graph_objects as go

# GitHub Pages에서 제공하는 아이콘 URL
icons = {
    'Very Good': 'https://ahyeongj.github.io/sasimi/verygood_house.png',
    'Good': 'https://ahyeongj.github.io/sasimi/good_house.png',
    'Average': 'https://ahyeongj.github.io/sasimi/average_house.png',
    'Bad': 'https://ahyeongj.github.io/sasimi/bad_house.png'
}

fig = go.Figure()

x_positions = [0.1, 0.4, 0.7, 1.0]
y_position = 0.5

categories = ['Bad', 'Average', 'Good', 'Very Good']

for i, category in enumerate(categories):
    branch2_count = branch2[branch2['Overall_Cond'] == category].shape[0]
    ames_count = ames[ames['Overall_Cond'] == category].shape[0]

    # 카테고리를 위한 trace 추가
    fig = fig.add_trace(go.Scatter(
          x=[x_positions[i]],
          y=[y_position - 0.3],
          mode='text',
          text=[category],
          textposition='bottom center',
          showlegend=False,
          textfont=dict(size=20)  # 카테고리 텍스트 크기 설정
    ))

    # 아이콘 이미지를 추가
    fig = fig.add_layout_image(
          dict(
              source=icons[category],  # GitHub Pages URL
              xref="x", yref="y",
              x=x_positions[i], y=y_position,
              sizex=0.2, sizey=0.2,
              xanchor="center", yanchor="middle"
          )
    )

    # 텍스트 표시를 위한 trace 추가
    branch2_text = f"<b><span style='color:red;'>{branch2_count}</span></b> / {ames_count}"
    fig = fig.add_trace(go.Scatter(
          x=[x_positions[i]],
          y=[y_position + 0.25],
          mode='text',
          text=[branch2_text],
          textposition='bottom center',
          showlegend=False,
          textfont=dict(size=18)  # 비율 텍스트 크기 설정
    ))

# 레이아웃 업데이트: 배경색 흰색, 그리드 라인 제거
fig = fig.update_layout(
      title={
          'text': 'Branch 2, Overall Condition',  # 제목 설정
          'x': 0.5,  # 중앙에 오도록 설정
          'xanchor': 'center',  # 중앙 정렬
          'yanchor': 'top',  # 위쪽 정렬
          'font': dict(size=24, color='black')  # 제목 폰트 크기 및 색상 설정
      },
      xaxis=dict(
          visible=False,
          showgrid=False,  # X축 그리드 제거
          zeroline=False,  # X축 제로라인 제거
          range=[-0.1, 1.2]
      ),
      yaxis=dict(
          visible=False,
          showgrid=False,  # Y축 그리드 제거
          zeroline=False  # Y축 제로라인 제거
      ),
      plot_bgcolor='white',  # 플롯 배경색 흰색
      paper_bgcolor='white', # 전체 배경색 흰색
      margin=dict(l=30, r=30, t=55, b=25)  # 여백 조정
)

# 그래프 표시
fig.show()
```


## {heihgt:30%}
## {width: 50%}

```{python}
#방갯수 - 브랜치 2
all_branch=ames.copy()
all_branch["Branch_Number"]="Branch_all"
all_branch=all_branch[["TotRms_AbvGrd","Branch_Number"]].groupby("TotRms_AbvGrd").count()
all_branch_mean=all_branch["Branch_Number"]/all_branch["Branch_Number"].sum()
all_branch_mean=all_branch_mean.to_frame()
# 브랜치 2
branch2=ames.query('Branch_Number=="Branch_2"')[["TotRms_AbvGrd","Branch_Number"]].groupby("TotRms_AbvGrd").count()
branch2_mean=branch2["Branch_Number"]/branch2["Branch_Number"].sum()
branch2_mean=branch2_mean.to_frame()
branch2_mean["Branch_Number"]=-branch2_mean["Branch_Number"]

df_room_mean=pd.concat([branch2_mean,all_branch_mean]).reset_index(drop=False)
df_room_mean["branch_num"]=["Branch_2"] * len(branch2_mean) + ["Branch_all"]* len(all_branch_mean)

# pyramid plot branch 2 과 전체의 방 갯수 : mean
fig = px.bar(df_room_mean, 
             x='Branch_Number', 
             y='TotRms_AbvGrd', 
             color='branch_num',
             orientation='h', 
             labels={'Branch_Number': 'Branch_Count', 'TotRms_AbvGrd': 'total_room_num'},
             color_discrete_map={'Branch_2': '#F7FEAE', 'Branch_all': '#058092'})

fig = fig.update_traces(textfont=dict(size=7))

##
# x축 값을 원하는 숫자로 수정
custom_tickvals = [-0.3, -0.2, -0.1, 0, 0.1, 0.2, 0.3]  # 예를 들어, 0과 1로 표시하고 싶다면
custom_ticktext = [0.3, 0.2, 0.1, 0, 0.1, 0.2, 0.3]  # 그에 대응하는 텍스트

fig = fig.update_layout(
      title='branch2 vs all ames - room : mean',
      xaxis_title='branch2 vs all ames',
      yaxis_title='room_count',
      xaxis=dict(
          tickvals=custom_tickvals,  # 커스텀 tickvals 설정
          ticktext=custom_ticktext,
          range=[-0.3, 0.3]   # 커스텀 ticktext 설정
      ),
      yaxis=dict(
          showticklabels=False  # y축의 범례 숨기기
      ),
      barmode='overlay',
      plot_bgcolor='white',  # 플롯 배경색 흰색
      paper_bgcolor='white' # 전체 배경색 흰색
)
fig = fig.add_scatter(x=[0]*len(df_room_mean), 
                      y=df_room_mean['TotRms_AbvGrd'], 
                      mode='text', 
                      text=df_room_mean['TotRms_AbvGrd'], 
                      textposition="middle center"
                      )


fig.show()
```


```{python}

year_df=ames[["Year_Built","Year_Remod_Add","Branch_Number"]]

def year(x):
    for i in range(20):
        if 1870+(10*i) <= x <1880+(10*i):
            x= 1870+(10*i)
        else:
            continue
    return x

year_df["Year_Remod_Add"]=year_df["Year_Remod_Add"].apply(year)
year_df["Year_Built"]=year_df["Year_Built"].apply(year)

year_df=year_df.query('Branch_Number=="Branch_2"')\
    .groupby(["Year_Built","Year_Remod_Add"]).count().reset_index(drop=False)

# scatter plot

fig = px.scatter(year_df, x= 'Year_Built', y= 'Year_Remod_Add',size= "Branch_Number", text="Branch_Number",color="Branch_Number",\
                 color_continuous_scale=px.colors.sequential.Bluyl, size_max = 45)

fig = fig.update_traces(textfont=dict(size=10),textposition='top center')

fig = fig.update_layout(
   plot_bgcolor='white',  # 그래프 배경색을 흰색으로 설정
   paper_bgcolor='white'  # 전체 배경색을 흰색으로 설정
)

fig.show()
```



## {height: 10%}
```{python}
tot_1st = ames.query('Second_Flr_SF == False') \
               .agg(count =('Second_Flr_SF','count'))
tot_1st = tot_1st['Second_Flr_SF'][0]

tot_2nd = ames.query('Second_Flr_SF == True') \
               .agg(count =('Second_Flr_SF','count'))
tot_2nd = tot_2nd['Second_Flr_SF'][0]


b2_1st = ames.query('Branch_Number == "Branch_2" & Second_Flr_SF == False') \
               .agg(count =('Branch_Number','count'))
b2_1st = b2_1st['Branch_Number'][0]

b2_2nd = ames.query('Branch_Number == "Branch_2" & Second_Flr_SF == True') \
               .agg(count =('Branch_Number','count'))
b2_2nd = b2_2nd['Branch_Number'][0]

b2_1 = f"{b2_1st} / {tot_1st}"
b2_2 = f"{b2_2nd} / {tot_2nd}"
```


```{python}
#| content: valuebox
#| title: "1st Floor in Branch 2"
dict(
  icon = "1-square-fill",
  color = "#F7FEAE",
  value = b2_1
)
```

```{python}
#| content: valuebox
#| title: "2nd Floor in Branch 2"
dict(
  icon = "2-square-fill",
  color = "#F7FEAE",
  value = b2_2
)
```

## Row

```{python}
# Distance_m의 전체 평균 계산
distance_mean = ames['Distance_m'].mean()

# Branch_1의 평균 Distance_m 계산
branch_2_mean = ames.query('Branch_Number == "Branch_2"')['Distance_m'].mean()

# 막대그래프 그리기
fig = go.Figure()

fig = fig.add_trace(go.Bar(
      x=[distance_mean, branch_2_mean],  # x축에 평균값을 설정
      y=['Distance Mean', 'Branch_2 Mean'],  # y축에 레이블을 설정
      orientation='h',  # 가로 막대그래프 설정
      marker=dict(color=['#058092', '#9BD8A4']),  # 막대 색상 설정
      text=[f"{distance_mean:,.2f}", f"{branch_2_mean:,.2f}"],  # 텍스트로 값 설정
      textposition='inside',  # 텍스트 위치를 막대 안으로 설정
      insidetextanchor='middle'  # 텍스트를 막대 가운데 정렬
))

# 이모지 추가 (각각의 막대 끝에)
fig = fig.add_annotation(
      text='🏃‍♂️',  # 이모지 텍스트 먼저 지정
      x=distance_mean,  # Distance Mean 막대의 끝에 이모지를 추가
      y='Distance Mean',
      showarrow=False,
      xanchor='left',
      yanchor='middle',
      xshift=30,  # 막대 끝에서 약간 오른쪽에 이모지를 표시
      font=dict(size=60)  # 이모지 크기 조절
)

fig = fig.add_annotation(
      text='🏃‍♂️',  # 이모지 텍스트 먼저 지정
      x=branch_2_mean,  # Branch_3 Mean 막대의 끝에 이모지를 추가
      y='Branch_2 Mean',
      showarrow=False,
      xanchor='left',
      yanchor='middle',
      xshift=30,  # 막대 끝에서 약간 오른쪽에 이모지를 표시
      font=dict(size=60)  # 이모지 크기 조절
)

# 그래프 레이아웃 설정
fig = fig.update_layout(
      title='Distance',
      xaxis_title='Distance (m)',
      yaxis_title='',
      yaxis=dict(autorange="reversed"),  # y축 순서 뒤집기 (가로 막대그래프일 때)
      bargap=0.5,  # 막대 사이 간격 설정
      plot_bgcolor='white',  # 그래프 배경색을 흰색으로 설정
      paper_bgcolor='white'  # 전체 배경색을 흰색으로 설정
)

# 그래프 보여주기
fig.show()

```


# Branch 3 
##
```{python}
def determine_icon_path(sale_price):
    if sale_price >= 217450:
        return "images/building.png"
    elif 165000 <= sale_price < 217450:
        return "images/house3.png"
    elif 132000 <= sale_price < 165000:
        return "images/house4.png"
    else:
        return "images/house5.png"
def branch_map(df, branch_number):
  branch_data = df[df['Branch_Number'] == branch_number]
  map_center = [branch_data['Latitude'].mean(), branch_data['Longitude'].mean()]
  m = folium.Map(location=map_center, tiles="CartoDB positron", zoom_start=12)  
  univ_icon =  folium.CustomIcon("images/univ1.png", icon_size=(50, 50))
  popup_text2 = "University of Iowa"
  folium.Marker(
      location=[42.0267, -93.6465],
      popup=folium.Popup(popup_text2, max_width=300),
      icon=univ_icon).add_to(m)
  draw = Draw(
    draw_options={
        'polyline': True,
        'polygon': True,
        'circle': True,
        'marker': True,
        'circlemarker': False
    },
    edit_options={'edit': True, 'remove': True}
    ).add_to(m)

  for row in branch_data.itertuples():
    if row.Distance_m / 60 <= 20 :
      popup_text = f"""
      가격 : {row.Sale_Price}<br>
      침실개수 : {row.Bedroom_AbvGr}<br>
      화장실 갯수 : {row.Bath_AbvGr}<br>
      층수 : {row.Second_Flr_SF}<br>
      도보 : 약 {round(row.Distance_m / 60,1)} 분<br>
      차량 : 약 {round(row.Distance_m / 1000,1)} 분(60km/h)
      """
    else :
      popup_text = f"""
      가격 : {row.Sale_Price}<br>
      침실개수 : {row.Bedroom_AbvGr}<br>
      화장실 갯수 : {row.Bath_AbvGr}<br>
      층수 : {row.Second_Flr_SF}<br>
      차량 : 약 {round(row.Distance_m / 1000,1)} 분(60km/h)

      """
      # 조건 들어갈 자리
    icon_path = determine_icon_path(row.Sale_Price) 
    icon = folium.CustomIcon(icon_path, icon_size=(90, 80))
    folium.Marker(
        location=[row.Latitude, row.Longitude],
        popup=folium.Popup(popup_text, max_width=300),
        icon=icon
    ).add_to(m)

    # 범례 추가
  legend_html = '''
    <div style="
    position: fixed; 
    top: 10px; right: 10px; width: 160px; height: 140px; 
    border:2px solid grey; z-index:9999; font-size:12px;
    background-color:white; padding: 10px;
    ">
    <b>Branch_1</b><br>
    <img src="images/1.png" height="20" width="20"> House 1<br>
    <img src="images/2.png" height="20" width="20"> House 2<br>
    <img src="images/3.png" height="20" width="20"> House 3<br>
    <img src="images/4.png" height="20" width="20"> Building
    </div>
    '''
  m.get_root().html.add_child(folium.Element(legend_html))
  return m


branch_map(df,'Branch_3')
```

## {height:30%}
## {width: 50%}

```{python}
ames = pd.read_csv("data/ames.csv")
branch3 = ames.query("Branch_Number == 'Branch_3'")
# 재범주화 함수 정의
def recondition(condition):
    if condition in ['Very_Poor', 'Poor', 'Below_Average']:
        return 'Bad'
    elif condition == 'Average':
        return 'Average'
    elif condition in ['Above_Average', 'Fair', 'Good']:
        return 'Good'
    elif condition in ['Very_Good', 'Excellent']:
        return 'Very Good'

# 데이터프레임의 Overall_Cond 컬럼 재범주화
ames['Overall_Cond'] = ames['Overall_Cond'].apply(recondition)
branch3['Overall_Cond'] = branch3['Overall_Cond'].apply(recondition)

import plotly.graph_objects as go

# GitHub Pages에서 제공하는 아이콘 URL
icons = {
    'Very Good': 'https://ahyeongj.github.io/sasimi/verygood_house.png',
    'Good': 'https://ahyeongj.github.io/sasimi/good_house.png',
    'Average': 'https://ahyeongj.github.io/sasimi/average_house.png',
    'Bad': 'https://ahyeongj.github.io/sasimi/bad_house.png'
}

fig = go.Figure()

x_positions = [0.1, 0.4, 0.7, 1.0]
y_position = 0.5

categories = ['Bad', 'Average', 'Good', 'Very Good']

for i, category in enumerate(categories):
    branch3_count = branch3[branch3['Overall_Cond'] == category].shape[0]
    ames_count = ames[ames['Overall_Cond'] == category].shape[0]

    # 카테고리를 위한 trace 추가
    fig = fig.add_trace(go.Scatter(
          x=[x_positions[i]],
          y=[y_position - 0.3],
          mode='text',
          text=[category],
          textposition='bottom center',
          showlegend=False,
          textfont=dict(size=20)  # 카테고리 텍스트 크기 설정
    ))

    # 아이콘 이미지를 추가
    fig = fig.add_layout_image(
          dict(
              source=icons[category],  # GitHub Pages URL
              xref="x", yref="y",
              x=x_positions[i], y=y_position,
              sizex=0.2, sizey=0.2,
              xanchor="center", yanchor="middle"
          )
    )

    # 텍스트 표시를 위한 trace 추가
    branch3_text = f"<b><span style='color:red;'>{branch3_count}</span></b> / {ames_count}"
    fig = fig.add_trace(go.Scatter(
          x=[x_positions[i]],
          y=[y_position + 0.25],
          mode='text',
          text=[branch3_text],
          textposition='bottom center',
          showlegend=False,
          textfont=dict(size=18)  # 비율 텍스트 크기 설정
    ))

# 레이아웃 업데이트: 배경색 흰색, 그리드 라인 제거
fig = fig.update_layout(
      title={
          'text': 'Branch 3, Overall Condition',  # 제목 설정
          'x': 0.5,  # 중앙에 오도록 설정
          'xanchor': 'center',  # 중앙 정렬
          'yanchor': 'top',  # 위쪽 정렬
          'font': dict(size=24, color='black')  # 제목 폰트 크기 및 색상 설정
      },
      xaxis=dict(
          visible=False,
          showgrid=False,  # X축 그리드 제거
          zeroline=False,  # X축 제로라인 제거
          range=[-0.1, 1.2]
      ),
      yaxis=dict(
          visible=False,
          showgrid=False,  # Y축 그리드 제거
          zeroline=False  # Y축 제로라인 제거
      ),
      plot_bgcolor='white',  # 플롯 배경색 흰색
      paper_bgcolor='white', # 전체 배경색 흰색
      margin=dict(l=30, r=30, t=55, b=25)  # 여백 조정
)

# 그래프 표시
fig.show()
```


```{python}
# 재범주화 함수 정의
def recondition(condition):
    if condition in ['Very_Poor', 'Poor', 'Below_Average']:
        return 'Bad'
    elif condition == 'Average':
        return 'Average'
    elif condition in ['Above_Average', 'Fair', 'Good']:
        return 'Good'
    elif condition in ['Very_Good', 'Excellent']:
        return 'Very Good'

# 데이터프레임의 Overall_Cond 컬럼 재범주화
ames['Overall_Cond'] = ames['Overall_Cond'].apply(recondition)
branch1['Overall_Cond'] = branch1['Overall_Cond'].apply(recondition)

import plotly.graph_objects as go

# GitHub Pages에서 제공하는 아이콘 URL
icons = {
    'Very Good': 'https://ahyeongj.github.io/sasimi/verygood_house.png',
    'Good': 'https://ahyeongj.github.io/sasimi/good_house.png',
    'Average': 'https://ahyeongj.github.io/sasimi/average_house.png',
    'Bad': 'https://ahyeongj.github.io/sasimi/bad_house.png'
}

fig = go.Figure()

x_positions = [0.1, 0.4, 0.7, 1.0]
y_position = 0.5

categories = ['Bad', 'Average', 'Good', 'Very Good']

for i, category in enumerate(categories):
    branch1_count = branch2[branch2['Overall_Cond'] == category].shape[0]
    ames_count = ames[ames['Overall_Cond'] == category].shape[0]

    # 카테고리를 위한 trace 추가
    fig = fig.add_trace(go.Scatter(
          x=[x_positions[i]],
          y=[y_position - 0.3],
          mode='text',
          text=[category],
          textposition='bottom center',
          showlegend=False,
          textfont=dict(size=20)  # 카테고리 텍스트 크기 설정
    ))

    # 아이콘 이미지를 추가
    fig = fig.add_layout_image(
          dict(
              source=icons[category],  # GitHub Pages URL
              xref="x", yref="y",
              x=x_positions[i], y=y_position,
              sizex=0.2, sizey=0.2,
              xanchor="center", yanchor="middle"
          )
    )  
  
    # 텍스트 표시를 위한 trace 추가
    branch1_text = f"<b><span style='color:red;'>{branch1_count}</span></b> / {ames_count}"
    fig.add_trace(go.Scatter(
        x=[x_positions[i]],
        y=[y_position + 0.25],
        mode='text',
        text=[branch1_text],
        textposition='bottom center',
        showlegend=False,
        textfont=dict(size=18)  # 비율 텍스트 크기 설정
    ))

# 레이아웃 업데이트: 배경색 흰색, 그리드 라인 제거
fig = fig.update_layout(
      title='Ames Neighborhood Condition Distribution',
      xaxis=dict(
          visible=False,
          showgrid=False,  # X축 그리드 제거
          zeroline=False,  # X축 제로라인 제거
          range=[-0.1, 1.2]
      ),
      yaxis=dict(
          visible=False,
          showgrid=False,  # Y축 그리드 제거
          zeroline=False  # Y축 제로라인 제거
      ),
      plot_bgcolor='white',  # 플롯 배경색 흰색
      paper_bgcolor='white', # 전체 배경색 흰색
      margin=dict(l=30, r=30, t=55, b=25)  # 여백 조정
)

# 그래프 표시
fig.show()
```


## {heihgt:30%}
## {width: 50%}
```{python}
#방갯수 branch 3
all_branch=ames.copy()
all_branch["Branch_Number"]="Branch_all"
all_branch=all_branch[["TotRms_AbvGrd","Branch_Number"]].groupby("TotRms_AbvGrd").count()
all_branch_mean=all_branch["Branch_Number"]/all_branch["Branch_Number"].sum()
all_branch_mean=all_branch_mean.to_frame()
# 브랜치 3
branch=ames.query('Branch_Number=="Branch_3"')[["TotRms_AbvGrd","Branch_Number"]]
branch=branch.groupby("TotRms_AbvGrd").count() #count 에서 mean으로 변경

branch_mean=branch["Branch_Number"]/branch["Branch_Number"].sum()
branch_mean=branch_mean.to_frame()
branch_mean["Branch_Number"]=-branch_mean["Branch_Number"]

df_room_mean=pd.concat([branch_mean,all_branch_mean]).reset_index(drop=False)
df_room_mean["branch_num"]=["Branch_3"] * len(branch_mean) + ["Branch_all"]* len(all_branch_mean)

# pyramid plot branch 1 과 전체의 방 갯수 : mean
fig = px.bar(df_room_mean, 
             x='Branch_Number', 
             y='TotRms_AbvGrd', 
             color='branch_num',
             orientation='h', 
             labels={'Branch_Number': 'Branch_Count', 'TotRms_AbvGrd': 'total_room_num'},
             color_discrete_map={'Branch_3': '#F7FEAE', 'Branch_all': '#058092'})

fig = fig.update_traces(textfont=dict(size=7))

#
# x축 값을 원하는 숫자로 수정
custom_tickvals = [-0.3, -0.2, -0.1, 0, 0.1, 0.2, 0.3]  
custom_ticktext = [0.3, 0.2, 0.1, 0, 0.1, 0.2, 0.3] 

fig = fig.update_layout(
      title='branch3 vs all ames - room : mean',
      xaxis_title='branch3 vs all ames',
      yaxis_title='room_count',
      xaxis=dict(
          tickvals=custom_tickvals,  # 커스텀 tickvals 설정
          ticktext=custom_ticktext,
          range=[-0.3, 0.3]   # 커스텀 ticktext 설정
      ),
      yaxis=dict(
          showticklabels=False  # y축의 범례 숨기기
      ),
      barmode='overlay',
      plot_bgcolor='white',  # 플롯 배경색 흰색
      paper_bgcolor='white' # 전체 배경색 흰색
)
fig = fig.add_scatter(x=[0]*len(df_room_mean), 
                      y=df_room_mean['TotRms_AbvGrd'], 
                      mode='text', 
                      text=df_room_mean['TotRms_AbvGrd'], 
                      textposition="middle center"
                      )


fig.show()
```


```{python}
year_df=ames[["Year_Built","Year_Remod_Add","Branch_Number"]]

def year(x):
    for i in range(20):
        if 1870+(10*i) <= x <1880+(10*i):
            x= 1870+(10*i)
        else:
            continue
    return x

year_df["Year_Remod_Add"]=year_df["Year_Remod_Add"].apply(year)
year_df["Year_Built"]=year_df["Year_Built"].apply(year)

year_df=year_df.query('Branch_Number=="Branch_3"')\
    .groupby(["Year_Built","Year_Remod_Add"]).count().reset_index(drop=False)


# scatter plot

fig = px.scatter(year_df, x= 'Year_Built', y= 'Year_Remod_Add',size= "Branch_Number", text="Branch_Number",color="Branch_Number",\
                 color_continuous_scale=px.colors.sequential.Bluyl, size_max = 45)


fig = fig.update_traces(textfont=dict(size=10),textposition='top center')



for x in range(187, 203):
    fig = fig.add_shape(
          type="line",
          x0=x*10, y0=1860, x1=x*10, y1=2020,
          line=dict(color="LightGrey", width=1, dash="dot")
    )

for y in range(190, 203):
    fig = fig.add_shape(
          type="line",
          x0=1860, y0=y*10, x1=2020, y1=y*10,
          line=dict(color="LightGrey", width=1, dash="dot")
    )

x_custom_tickvals = [1870, 1880, 1890, 1900, 1910, 1920, 1930, 1940, 1950, 1960, 1970, 1980, 1990, 2000, 2010]
x_custom_ticktext = [1870, 1880, 1890, 1900, 1910, 1920, 1930, 1940, 1950, 1960, 1970, 1980, 1990, 2000, 2010]

y_custom_tickvals = [1950, 1960, 1970, 1980, 1990, 2000, 2010]
y_custom_ticktext = [1950, 1960, 1970, 1980, 1990, 2000, 2010]


fig = fig.update_layout(
      title='year built vs remodel',
      xaxis_title='year_built',
      yaxis_title='year_remodel',
      xaxis=dict(
          tickvals=x_custom_tickvals,
          ticktext=x_custom_ticktext,
          range=[1870, 2015]),
      yaxis=dict(
          tickvals=y_custom_tickvals,
          ticktext=y_custom_ticktext,
          range=[1945, 2015])
          )

fig = fig.update_layout(
   plot_bgcolor='white',  # 그래프 배경색을 흰색으로 설정
   paper_bgcolor='white'  # 전체 배경색을 흰색으로 설정
)

fig.show()
```



## {height: 10%}
```{python}
tot_1st = ames.query('Second_Flr_SF == False') \
               .agg(count =('Second_Flr_SF','count'))
tot_1st = tot_1st['Second_Flr_SF'][0]

tot_2nd = ames.query('Second_Flr_SF == True') \
               .agg(count =('Second_Flr_SF','count'))
tot_2nd = tot_2nd['Second_Flr_SF'][0]


b3_1st = ames.query('Branch_Number == "Branch_3" & Second_Flr_SF == False') \
               .agg(count =('Branch_Number','count'))
b3_1st = b3_1st['Branch_Number'][0]

b3_2nd = ames.query('Branch_Number == "Branch_3" & Second_Flr_SF == True') \
               .agg(count =('Branch_Number','count'))
b3_2nd = b3_2nd['Branch_Number'][0]

b3_1 = f"{b3_1st} / {tot_1st}"
b3_2 = f"{b3_2nd} / {tot_2nd}"
```


```{python}
#| content: valuebox
#| title: "1st Floor in Branch 3"
dict(
  icon = "1-square-fill",
  color = "#F7FEAE",
  value = b3_1
)
```

```{python}
#| content: valuebox
#| title: "2nd Floor in Branch 3"
dict(
  icon = "2-square-fill",
  color = "#F7FEAE",
  value = b3_2
)
```

## Row

```{python}
# Distance_m의 전체 평균 계산
distance_mean = ames['Distance_m'].mean()

# Branch_3의 평균 Distance_m 계산
branch_3_mean = ames.query('Branch_Number == "Branch_3"')['Distance_m'].mean()

# 막대그래프 그리기
fig = go.Figure()

fig = fig.add_trace(go.Bar(
      x=[distance_mean, branch_3_mean],  # x축에 평균값을 설정
      y=['Distance Mean', 'Branch_3 Mean'],  # y축에 레이블을 설정
      orientation='h',  # 가로 막대그래프 설정
      marker=dict(color=['#058092', '#9BD8A4']),  # 막대 색상 설정
      text=[f"{distance_mean:,.2f}", f"{branch_3_mean:,.2f}"],  # 텍스트로 값 설정
      textposition='inside',  # 텍스트 위치를 막대 안으로 설정
      insidetextanchor='middle'  # 텍스트를 막대 가운데 정렬
))

# 이모지 추가 (각각의 막대 끝에)
fig = fig.add_annotation(
      text='🏃‍♂️',  # 이모지 텍스트 먼저 지정
      x=distance_mean,  # Distance Mean 막대의 끝에 이모지를 추가
      y='Distance Mean',
      showarrow=False,
      xanchor='left',
      yanchor='middle',
      xshift=30,  # 막대 끝에서 약간 오른쪽에 이모지를 표시
      font=dict(size=60)  # 이모지 크기 조절
)

fig = fig.add_annotation(
      text='🏃‍♂️',  # 이모지 텍스트 먼저 지정
      x=branch_3_mean,  # Branch_3 Mean 막대의 끝에 이모지를 추가
      y='Branch_3 Mean',
      showarrow=False,
      xanchor='left',
      yanchor='middle',
      xshift=30,  # 막대 끝에서 약간 오른쪽에 이모지를 표시
      font=dict(size=60)  # 이모지 크기 조절
)

# 그래프 레이아웃 설정
fig = fig.update_layout(
      title='Distance',
      xaxis_title='Distance (m)',
      yaxis_title='',
      yaxis=dict(autorange="reversed"),  # y축 순서 뒤집기 (가로 막대그래프일 때)
      bargap=0.5,  # 막대 사이 간격 설정
      plot_bgcolor='white',  # 그래프 배경색을 흰색으로 설정
      paper_bgcolor='white'  # 전체 배경색을 흰색으로 설정
)

# 그래프 보여주기
fig.show()
```

# Branch 4
##
```{python}
def determine_icon_path(sale_price):
    if sale_price >= 217450:
        return "images/building.png"
    elif 165000 <= sale_price < 217450:
        return "images/house3.png"
    elif 132000 <= sale_price < 165000:
        return "images/house4.png"
    else:
        return "images/house5.png"

def branch_map(df, branch_number):
  branch_data = df[df['Branch_Number'] == branch_number]
  map_center = [branch_data['Latitude'].mean(), branch_data['Longitude'].mean()]
  m = folium.Map(location=map_center, tiles="CartoDB positron", zoom_start=12)  
  univ_icon =  folium.CustomIcon("images/univ1.png", icon_size=(50, 50))
  popup_text2 = "University of Iowa"
  folium.Marker(
      location=[42.0267, -93.6465],
      popup=folium.Popup(popup_text2, max_width=300),
      icon=univ_icon).add_to(m)
  draw = Draw(
    draw_options={
        'polyline': True,
        'polygon': True,
        'circle': True,
        'marker': True,
        'circlemarker': False
    },
    edit_options={'edit': True, 'remove': True}
    ).add_to(m)

  for row in branch_data.itertuples():
    if row.Distance_m / 60 <= 20 :
      popup_text = f"""
      가격 : {row.Sale_Price}<br>
      침실개수 : {row.Bedroom_AbvGr}<br>
      화장실 갯수 : {row.Bath_AbvGr}<br>
      층수 : {row.Second_Flr_SF}<br>
      도보 : 약 {round(row.Distance_m / 60,1)} 분<br>
      차량 : 약 {round(row.Distance_m / 1000,1)} 분(60km/h)
      """
    else :
      popup_text = f"""
      가격 : {row.Sale_Price}<br>
      침실개수 : {row.Bedroom_AbvGr}<br>
      화장실 갯수 : {row.Bath_AbvGr}<br>
      층수 : {row.Second_Flr_SF}<br>
      차량 : 약 {round(row.Distance_m / 1000,1)} 분(60km/h)

      """
      # 조건 들어갈 자리
    icon_path = determine_icon_path(row.Sale_Price) 
    icon = folium.CustomIcon(icon_path, icon_size=(90, 80))
    folium.Marker(
        location=[row.Latitude, row.Longitude],
        popup=folium.Popup(popup_text, max_width=300),
        icon=icon
    ).add_to(m)

    # 범례 추가
  legend_html = '''
    <div style="
    position: fixed; 
    top: 10px; right: 10px; width: 160px; height: 140px; 
    border:2px solid grey; z-index:9999; font-size:12px;
    background-color:white; padding: 10px;
    ">
    <b>Branch_1</b><br>
    <img src="images/1.png" height="20" width="20"> House 1<br>
    <img src="images/2.png" height="20" width="20"> House 2<br>
    <img src="images/3.png" height="20" width="20"> House 3<br>
    <img src="images/4.png" height="20" width="20"> Building
    </div>
    '''
  m.get_root().html.add_child(folium.Element(legend_html))
  return m

branch_map(df,'Branch_4')
```

## {height:25%}
## {width: 50%}

```{python}
ames = pd.read_csv("data/ames.csv")
branch4 = ames.query("Branch_Number == 'Branch_4'")
price_min, price_max = ames['Sale_Price'].min(), ames['Sale_Price'].max()
bin_count = 40
bin_size = (price_max - price_min) / bin_count

fig = go.Figure()
# 첫 번째 데이터프레임의 히스토그램 추가
fig = fig.add_trace(go.Histogram(
      x=ames['Sale_Price'],
      name='Ames',
      opacity=0.6,  # 투명도 설정
      marker=dict(color='#058092',
          line=dict(color='black', width=0.5)  # 경계선 설정
      ),
      xbins=dict(
          start=price_min,  
          end=price_max,  
          size=bin_size
)))

# 두 번째 데이터프레임의 히스토그램 추가
fig = fig.add_trace(go.Histogram(
      x=branch4['Sale_Price'],
      name='Branch4',
      opacity=0.7,  # 투명도 설정
      marker=dict(color= '#F7FEAE',
          line=dict(color='black', width=0.5)  # 경계선 설정
      ),
      xbins=dict(
          start=price_min,  
          end=price_max,  
          size=bin_size
)))

# 히스토그램을 겹쳐서 표시하기 위해 바 형태를 겹쳐서 그리도록 설정
fig = fig.update_layout(
      barmode='overlay',
      plot_bgcolor='white',  # 배경색 흰색으로 설정
      xaxis=dict(
          showgrid=False,  # X축 그리드 제거
          title='Sale Price'  # X축 제목 설정
      ),
      yaxis=dict(
          showgrid=False,  # Y축 그리드 제거
          title='Frequency'  # Y축 제목 설정
      ),
      title={
        'text': 'House Sale Price',  # 제목 설정
        'x': 0.5,  # 제목을 중앙으로 설정
        'xanchor': 'center',  # 중앙 정렬
        'yanchor': 'top',  # 제목이 위쪽에 위치하도록 설정
        'font': dict(size=24, color='black')  # 제목 폰트 크기 및 색상 설정
    }
)
# 그래프 표시
fig.show()
```


```{python}
# 재범주화 함수 정의
ames = pd.read_csv("data/ames.csv")
branch4 = ames.query("Branch_Number == 'Branch_4'")
# 재범주화 함수 정의
def recondition(condition):
    if condition in ['Very_Poor', 'Poor', 'Below_Average']:
        return 'Bad'
    elif condition == 'Average':
        return 'Average'
    elif condition in ['Above_Average', 'Fair', 'Good']:
        return 'Good'
    elif condition in ['Very_Good', 'Excellent']:
        return 'Very Good'

# 데이터프레임의 Overall_Cond 컬럼 재범주화
ames['Overall_Cond'] = ames['Overall_Cond'].apply(recondition)
branch4['Overall_Cond'] = branch4['Overall_Cond'].apply(recondition)

import plotly.graph_objects as go

# GitHub Pages에서 제공하는 아이콘 URL
icons = {
    'Very Good': 'https://ahyeongj.github.io/sasimi/verygood_house.png',
    'Good': 'https://ahyeongj.github.io/sasimi/good_house.png',
    'Average': 'https://ahyeongj.github.io/sasimi/average_house.png',
    'Bad': 'https://ahyeongj.github.io/sasimi/bad_house.png'
}

fig = go.Figure()

x_positions = [0.1, 0.4, 0.7, 1.0]
y_position = 0.5

categories = ['Bad', 'Average', 'Good', 'Very Good']

for i, category in enumerate(categories):
    branch4_count = branch4[branch4['Overall_Cond'] == category].shape[0]
    ames_count = ames[ames['Overall_Cond'] == category].shape[0]

    # 카테고리를 위한 trace 추가
    fig = fig.add_trace(go.Scatter(
          x=[x_positions[i]],
          y=[y_position - 0.3],
          mode='text',
          text=[category],
          textposition='bottom center',
          showlegend=False,
          textfont=dict(size=20)  # 카테고리 텍스트 크기 설정
    ))

    # 아이콘 이미지를 추가
    fig = fig.add_layout_image(
          dict(
              source=icons[category],  # GitHub Pages URL
              xref="x", yref="y",
              x=x_positions[i], y=y_position,
              sizex=0.2, sizey=0.2,
              xanchor="center", yanchor="middle"
          )
    )

    # 텍스트 표시를 위한 trace 추가
    branch4_text = f"<b><span style='color:red;'>{branch4_count}</span></b> / {ames_count}"
    fig = fig.add_trace(go.Scatter(
          x=[x_positions[i]],
          y=[y_position + 0.25],
          mode='text',
          text=[branch4_text],
          textposition='bottom center',
          showlegend=False,
          textfont=dict(size=18)  # 비율 텍스트 크기 설정
    ))

# 레이아웃 업데이트: 배경색 흰색, 그리드 라인 제거
fig = fig.update_layout(
      title={
          'text': 'Branch 4, Overall Condition',  # 제목 설정
          'x': 0.5,  # 중앙에 오도록 설정
          'xanchor': 'center',  # 중앙 정렬
          'yanchor': 'top',  # 위쪽 정렬
          'font': dict(size=24, color='black')  # 제목 폰트 크기 및 색상 설정
      },
      xaxis=dict(
          visible=False,
          showgrid=False,  # X축 그리드 제거
          zeroline=False,  # X축 제로라인 제거
          range=[-0.1, 1.2]
      ),
      yaxis=dict(
          visible=False,
          showgrid=False,  # Y축 그리드 제거
          zeroline=False  # Y축 제로라인 제거
      ),
      plot_bgcolor='white',  # 플롯 배경색 흰색
      paper_bgcolor='white', # 전체 배경색 흰색
      margin=dict(l=30, r=30, t=55, b=25)  # 여백 조정
)

# 그래프 표시
fig.show()
```


## {heihgt:25%}
## {width: 50%}
```{python}
#방갯수
all_branch=ames.copy()
all_branch["Branch_Number"]="Branch_all"
all_branch=all_branch[["TotRms_AbvGrd","Branch_Number"]].groupby("TotRms_AbvGrd").count()
all_branch_mean=all_branch["Branch_Number"]/all_branch["Branch_Number"].sum()
all_branch_mean=all_branch_mean.to_frame()
# 브랜치 1 
branch=ames.query('Branch_Number=="Branch_1"')[["TotRms_AbvGrd","Branch_Number"]]
branch=branch.groupby("TotRms_AbvGrd").count() #count 에서 mean으로 변경
branch_mean=branch["Branch_Number"]/branch["Branch_Number"].sum()
branch_mean=branch_mean.to_frame()
branch_mean["Branch_Number"]=-branch_mean["Branch_Number"]
#
df_room_mean=pd.concat([branch_mean,all_branch_mean]).reset_index(drop=False)
df_room_mean["branch_num"]=["Branch_4"] * len(branch_mean) + ["Branch_all"]* len(all_branch_mean)

# pyramid plot branch 1 과 전체의 방 갯수 : mean
fig = px.bar(df_room_mean, 
             x='Branch_Number', 
             y='TotRms_AbvGrd', 
             color='branch_num',
             orientation='h', 
             labels={'Branch_Number': 'Branch_Count', 'TotRms_AbvGrd': 'total_room_num'},
             color_discrete_map={'Branch_4': '#F7FEAE', 'Branch_all': '#058092'})

fig = fig.update_traces(textfont=dict(size=7))

########
# x축 값을 원하는 숫자로 수정
custom_tickvals = [-0.3, -0.2, -0.1, 0, 0.1, 0.2, 0.3]  # 예를 들어, 0과 1로 표시하고 싶다면
custom_ticktext = [0.3, 0.2, 0.1, 0, 0.1, 0.2, 0.3]  # 그에 대응하는 텍스트

fig = fig.update_layout(
      title='branch4 vs all ames - room : mean',
      xaxis_title='branch4 vs all ames',
      yaxis_title='room_count',
      xaxis=dict(
          tickvals=custom_tickvals,  # 커스텀 tickvals 설정
          ticktext=custom_ticktext,
          range=[-0.3, 0.3]   # 커스텀 ticktext 설정
      ),
      yaxis=dict(
          showticklabels=False  # y축의 범례 숨기기
      ),
      barmode='overlay',
      plot_bgcolor='white',  # 플롯 배경색 흰색
      paper_bgcolor='white', # 전체 배경색 흰색
)
fig = fig.add_scatter(x=[0]*len(df_room_mean), 
                      y=df_room_mean['TotRms_AbvGrd'], 
                      mode='text', 
                      text=df_room_mean['TotRms_AbvGrd'], 
                      textposition="middle center"
                      )

# layout 대충
fig = fig.update_layout(
    plot_bgcolor='white',  # 그래프 배경색을 흰색으로 설정
    paper_bgcolor='white'  # 전체 배경색을 흰색으로 설정
)

fig.show()
```


```{python}
year_df=ames[["Year_Built","Year_Remod_Add","Branch_Number"]]

def year(x):
    for i in range(20):
        if 1870+(10*i) <= x <1880+(10*i):
            x= 1870+(10*i)
        else:
            continue
    return x

year_df["Year_Remod_Add"]=year_df["Year_Remod_Add"].apply(year)
year_df["Year_Built"]=year_df["Year_Built"].apply(year)

year_df=year_df.query('Branch_Number=="Branch_1"')\
    .groupby(["Year_Built","Year_Remod_Add"]).count().reset_index(drop=False)

# scatter plot
fig = px.scatter(year_df, x= 'Year_Built', y= 'Year_Remod_Add',size= "Branch_Number", text="Branch_Number",color="Branch_Number",\
                 color_continuous_scale=px.colors.sequential.Bluyl, size_max = 45)

fig = fig.update_traces(textfont=dict(size=10),textposition='top center')

for x in range(187, 203):
    fig = fig.add_shape(
          type="line",
          x0=x*10, y0=1860, x1=x*10, y1=2020,
          line=dict(color="LightGrey", width=1, dash="dot")
    )

for y in range(190, 203):
    fig = fig.add_shape(
          type="line",
          x0=1860, y0=y*10, x1=2020, y1=y*10,
          line=dict(color="LightGrey", width=1, dash="dot")
    )

x_custom_tickvals = [1870, 1880, 1890, 1900, 1910, 1920, 1930, 1940, 1950, 1960, 1970, 1980, 1990, 2000, 2010]
x_custom_ticktext = [1870, 1880, 1890, 1900, 1910, 1920, 1930, 1940, 1950, 1960, 1970, 1980, 1990, 2000, 2010]

y_custom_tickvals = [1950, 1960, 1970, 1980, 1990, 2000, 2010]
y_custom_ticktext = [1950, 1960, 1970, 1980, 1990, 2000, 2010]


fig = fig.update_layout(
    title='year built vs remodel',
    xaxis_title='year_built',
    yaxis_title='year_remodel',
    xaxis=dict(
        tickvals=x_custom_tickvals,
        ticktext=x_custom_ticktext,
        range=[1870, 2015]),
    yaxis=dict(
        tickvals=y_custom_tickvals,
        ticktext=y_custom_ticktext,
        range=[1945, 2015])
        )
fig = fig.update_layout(
   plot_bgcolor='white',  # 그래프 배경색을 흰색으로 설정
   paper_bgcolor='white'  # 전체 배경색을 흰색으로 설정
)
fig.show()
```



## {height: 20%}
```{python}
tot_1st = ames.query('Second_Flr_SF == False') \
               .agg(count =('Second_Flr_SF','count'))
tot_1st = tot_1st['Second_Flr_SF'][0]

tot_2nd = ames.query('Second_Flr_SF == True') \
               .agg(count =('Second_Flr_SF','count'))
tot_2nd = tot_2nd['Second_Flr_SF'][0]


b4_1st = ames.query('Branch_Number == "Branch_4" & Second_Flr_SF == False') \
               .agg(count =('Branch_Number','count'))
b4_1st = b4_1st['Branch_Number'][0]

b4_2nd = ames.query('Branch_Number == "Branch_4" & Second_Flr_SF == True') \
               .agg(count =('Branch_Number','count'))
b4_2nd = b4_2nd['Branch_Number'][0]

b4_1 = f"{b4_1st} / {tot_1st}"
b4_2 = f"{b4_2nd} / {tot_2nd}"
```


```{python}
#| content: valuebox
#| title: "1st Floor in Branch 4"
dict(
  color = "#F7FEAE",
  value = b4_1
)

```

```{python}
#| content: valuebox
#| title: "2nd Floor in Branch 4"
dict(
  color = "#F7FEAE",
  value = b4_2
)
```

## Row

```{python}
import pandas as pd
import plotly.graph_objects as go

# Distance_m의 전체 평균 계산
distance_mean = ames['Distance_m'].mean()

# Branch_4의 평균 Distance_m 계산
branch_4_mean = ames.query('Branch_Number == "Branch_4"')['Distance_m'].mean()

# 막대그래프 그리기
fig = go.Figure()

fig.add_trace(go.Bar(
    x=[distance_mean, branch_4_mean],  # x축에 평균값을 설정
    y=['Distance Mean', 'Branch_4 Mean'],  # y축에 레이블을 설정
    orientation='h',  # 가로 막대그래프 설정
    marker=dict(color=['#058092', '#9BD8A4']),  # 막대 색상 설정
    text=[f"{distance_mean:,.2f}", f"{branch_4_mean:,.2f}"],  # 텍스트로 값 설정
    textposition='inside',  # 텍스트 위치를 막대 안으로 설정
    insidetextanchor='middle',  # 텍스트를 막대 가운데 정렬
    textfont=dict(size=30)  # 텍스트 크기 설정
))

# 이모지 추가 (각각의 막대 끝에)
fig.add_annotation(
    x=distance_mean,  # Distance Mean 막대의 끝에 이모지를 추가
    y='Distance Mean',
    text='🏃‍♂️',
    showarrow=False,
    xanchor='left',
    yanchor='middle',
    xshift=30,  # 막대 끝에서 약간 오른쪽에 이모지를 표시
    font=dict(size=60)  # 이모지 크기 조절
)

fig.add_annotation(
    x=branch_4_mean,  # Branch_4 Mean 막대의 끝에 이모지를 추가
    y='Branch_4 Mean',
    text='🏃‍♂️',
    showarrow=False,
    xanchor='left',
    yanchor='middle',
    xshift=30,  # 막대 끝에서 약간 오른쪽에 이모지를 표시
    font=dict(size=60)  # 이모지 크기 조절
)

# 그래프 레이아웃 설정
fig.update_layout(
    title='Distance',
    xaxis_title='Distance (m)',
    yaxis_title='',
    yaxis=dict(autorange="reversed"),  # y축 순서 뒤집기 (가로 막대그래프일 때)
    bargap=0.6,  # 막대 사이 간격 설정
    plot_bgcolor='white',  # 그래프 배경색을 흰색으로 설정
    paper_bgcolor='white'  # 전체 배경색을 흰색으로 설정
)

# 그래프 보여주기
fig.show()
```
